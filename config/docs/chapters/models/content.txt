The model layer contains your application's business logic, typically inside persistent entities or service objects. Models in a ColdMVC application serve two purposes: to represent individual records in your database through properties as well as to provide database access through an abstraction layer on top of Hibernate ORM.

Models in ColdMVC contain several methods that help you easily query your database. Most of the methods are based on domain class methods found in Grails. Here's a quick list of the what's currently supported:

* add()
* count()
* countWhere()
* exists()
* findAll()
* findAllWhere()
* findWhere()
* get()
* has()
* list()
* new()

In addition to the methods mentioned above, ColdMVC also supports dynamic methods that are evaluated at runtime, which is made possible by leveraging ColdFusion's support of _onMissingMethod_. For example, assuming you had a _User_ model with _userName_ and _password_ properties, the following code is completely valid without having to actually define the method on the _User_ model:

	params.user = _User.findByUserNameAndPassword(params.userName, params.password);