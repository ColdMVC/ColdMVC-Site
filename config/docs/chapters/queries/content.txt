Most of the time you can use ColdMVC's basic ORM methods (_get()_, _list()_, _findAllWhere()_, etc...) for querying your database.

However, sometimes you need to build a complex query and using _findAllWhere()_ won't get the job done.

When this situation occurs, you can use the _find()_ or _findAll()_ methods on your model and write raw HQL.
While writing HQL is perfectly fine, it can sometimes lead to problems due to Hibernate's case-sensitivity and casting ColdFusion variables to Java data types.

A better option is to use ColdMVC's query builder using the _createQuery()_ method on your models.

In addition to all of the standard ColdMVC [operators] [1], the following methods are available when building a query:

## and(clauses)

Appends clauses to a query concatenated by an _and_ conjunction.

	var q = _Team.createQuery();
	
	q.innerJoin("city");
	
	q.where(
		q.and(
			q.eq("team.name", "Twins"),
			q.eq("city.name", "Minneapolis")
		)
	);
	
	var teams = q.list();

## andWhere(clauses)

Appends clauses to a query concatenated by an _and_ conjunction.

	var q = _Team.createQuery();
	
	q.innerJoin("city");
	
	q.where(
		q.eq("team.name", "Twins")
	);
	
	q.andWhere(
		q.eq("city.name", "Minneapolis")
	);
	
	var teams = q.list();

## count([value])

Executes the query and returns the number of results.

	var q = _Team.createQuery();
	
	var teams = q.count();

## get()

Executes the query and returns the first result or a new instance of the model if no results are found.
	
	var q = _Team.createQuery();
	
	q.innerJoin("city");
	
	q.where(
		q.eq("team.name", "Twins"),
		q.eq("city.name", "Minneapolis")
	);
	
	var team = q.get();

## innerJoin(property [, alias])

Adds an _inner join_ to the query.

	var q = _Team.createQuery();
	
	q.innerJoin("team.city");
	
	q.where(
		q.eq("city.name", "Minneapolis")
	);
	
	var teams = q.list();

## join(property [, alias])

Adds a _join_ to the query.

	var q = _Team.createQuery();
	
	q.join("city");
	
	q.where(
		q.eq("city.name", "Minneapolis")
	);
	
	var teams = q.list();
	
## leftJoin(property [, alias])

Adds a _left join_ to the query.

	var q = _Team.createQuery();
	
	q.leftJoin("team.city", "c");
	
	q.where(
		q.isNull("c.id");
	);
	
	var teams = q.list();

## list([options])

Executes the query and returns an array of results.

	var q = _Team.createQuery();
	
	var teams = q.list();
	
## max(value)

Specifies the maximum number of results for the query.
	
	var q = _Team.createQuery();
	
	q.max(10);
	
	var teams = q.list();
	
## offset(value)

Specifies the offset for the query.

	var q = _Team.createQuery();
	
	q.offset(20);
	
	var teams = q.list();

## or(clauses)

Appends clauses to a query concatenated by an _or_ disjunction.

	var q = _Team.createQuery();
	
	q.innerJoin("city");
	
	q.where(
		q.or(
			q.eq("team.name", "Twins"),
			q.eq("city.name", "Minneapolis")
		)
	);
	
	var teams = q.list();
	
## order(value)

Specifies the order for the query.

	var q = _Team.createQuery();
	
	q.order("asc");
	
	var teams = q.list();

## orWhere(clauses)

Appends clauses to a query concatenated by an _or_ disjunction.
	
	var q = _Team.createQuery();
	
	q.innerJoin("city");
	
	q.where(
		q.eq("team.name", "Twins")
	);
	
	q.orWhere(
		q.eq("city.name", "Minneapolis")
	);
	
	var teams = q.list();

## select(value)

Specifies the _select_ statement for the query. Can be used to execute custom select statements.
	
	var q = _Team.createQuery();
	
	q.select("select count(team.id)");
	
	var teams = get();
	
## sort(value)

Specifies the sort for the query.
	
	var q = _Team.createQuery();
	
	q.sort("name");
	
	var teams = q.list();

## where(clauses)

Appends clauses to a query concatenated by an _and_ conjunction.

	var q = _Team.createQuery();
	
	q.where(
		q.eq("name", "Twins")
	);
	
	var teams = q.list();
	
[1]: /guide/operators "Operators"