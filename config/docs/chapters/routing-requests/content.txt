At the most basic level, all a web application does is accept a user's request, process some data, then send a response back to the user. Figuring out what and how the application should process is what routing is all about.

## Recognizing Routes

A typical URL inside a ColdMVC application will look like following:

	http://myapp.com/index.cfm/product/show/1

Using pattern matching defined in a config file, ColdMVC is able to determine the appropriate controller and action that should be executed for the request, as well as any other parameters that should be populated into the request. For example, the previous URL would result in the show method being executed on the _ProductController_, while also setting _params.id_ to _1_. This is because the incoming request, _/product/show/1_ matches the default pattern _/:controller/:action/:id_, defined inside _/coldmvc/config/routes.cfm_.

You're able to create your own custom routes inside your application's _/config/routes.cfm_ file. Custom routes are especially handy when creating user-friendly URLs. For example, you could create a pattern that routes anything matching _/user/:name_ to _UserController.show()_. Here's what that route would look like inside the _routes.cfm_ config file:

	<cfset add("/user/:name", {defaults = {controller="user", action="show" }}) />

ColdMVC offers several other features for handling incoming routes, such as parameter requirements, default parameters, and computed parameters. However, knowing just the basics should cover most routing scenarios.

## Generating Routes

Recognizing routes makes up only half of routing. Since it's possible for ColdMVC to consume URLs that match a pattern, its equally important that ColdMVC is able to generate those same URLs as well.

The easiest way to generate a URL inside a view or a layout is by using the _#linkTo()#_ view helper. For most links in the application, you'll only need to specify the parameters, which typically consists of keys for the controller, action, and id.

For example, if you want to link to a blog post, your code might look like this:

	<a href="#linkTo({controller="post", action="show", id=post})#">#post.title()#</a>

If you don't specify a controller or an action in the parameters and a matching route can't be found, the router will look again, only this time it will add the current request's controller and action to the parameters.