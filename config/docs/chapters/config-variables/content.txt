You can define configuration variables for your application inside an [INI file] [1] located at _/root/config/config.ini_. Each section represents a different environment for your application, with the exception of the _default_ environment, which all other environments inherit settings from.

A typical _config.ini_ file for a blogging application might look like the following:

	[default]
	controller=blog
	sesURLs=true

	[development]
	development=true
	autoReload=true

	[production]
	reloadPassword=mySecretPassword

Now let's describe the various parts of this parts of this file.

## Default Environment

Inside the _default_ environment, we define the name of our application's default controller. In this case, we've set the value to _blog_. If we were to make a request to our application without specifying a controller, our application will route the request to the _BlogController_ by default.

We also set a _sesURLs_ property to true. This tells our application not to include _index.cfm_ on any URLs generated by the _linkTo_ or _redirect_ methods. Note: if you enable the _sesURLs_ config setting, it is up to you to provide the necessary URL rewriting logic inside an _.htaccess_ file or _web.config_ file, depending on which web server you're using.

## Development Environment

By setting _development_ to _true_, we enable a couple convenience options in our application for working in development mode. First, your application's views, layouts, and tags are re-generated each request, allowing you to see your changes immediately. Second, various internal component caches are cleared each request, such as caches for custom event listeners. Finally, debug information will be append to the bottom of your view, providing you with access to key information for your request.

Next, we set a _autoReload_ setting to _true_, meaning the application will be automatically reloaded each request. This is very helpful when in development in order to automatically reload your singleton components.

## Production Environment

In the _production_ environment, we set a variable called _reloadPassword_ to _mySecretPassword_. The _reloadPassword_ is used when reloading your application through the URL. Be default, you can reload your application simply by adding an _init_ variable to your URL without specify a password. By setting the _reloadPassword_ to _mySecretPassword_, you can only reload your application by adding _init=mySecretPassword_ to your URL. If you would like to change the _init_ variable to something else, simply add a config setting for _reloadKey_ inside your _config.ini_ file with the value of your choice.

## Accessing Config Settings

Your config settings are available to your application in a couple ways.

First, you can access any config setting by using the _config_ helper.

	var value = $.config.get("key");

Second, you can inject the _config_ bean into your components.

	/**
	 * @accessors true
	 * @singleton
	 */
	component {

		property config;

		function sendEmail() {

			if (config.get("allowEmails")) {
				// do stuff
			}

		}

	}

Third, you can inject your config settings directly into your singleton beans inside by using the the _${key}_ syntax inside your _/config/coldspring.xml_ file.

	<bean id="emailService" class="app.model.EmailService">
		<property name="allowEmails">
			<value>${allowEmails}</value>
		</property>
	</bean>

Finally, you can inject your config settings into your singleton beans simply by naming your keys using a _{bean}.{method}_ syntax. For example, by specifying a config setting of _emailService.allowEmails=true_, the bean factory will automatically call the _setAllowEmails_ method on the _emailService_ bean and pass in a value of _true_ when the bean is first constructed.

## Complex Values

You can pass complex values into your beans by using [JSON] [2] syntax for the value of your config setting. The bean factory will automatically convert the JSON string into a complex object before injecting the property into the component. The following example will inject an array into the _setBar_ method on the _fooService_ singleton bean.

	fooService.bar=["boo", "baz"]

[1]: http://en.wikipedia.org/wiki/INI_file "INI file"
[2]: http://en.wikipedia.org/wiki/JSON "JSON"
